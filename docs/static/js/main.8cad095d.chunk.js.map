{"version":3,"sources":["types.ts","components/home/index.tsx","components/userSelect/index.tsx","App.tsx","reportWebVitals.ts","serviceWorkerRegistration.ts","index.tsx","components/userSelect/index.module.css"],"names":["STATUS_CODES","Component","isMobile","token","user","setToken","setUser","history","useHistory","useState","isLoading","setIsLoading","status","setStatus","Date","startDate","setStartDate","endDate","setEndDate","startDateErrors","setStartDateErrors","endDateErrors","setEndDateErrors","changeStartDate","value","changeEndDate","datePickerLabelClick","e","preventDefault","download","a","fetch","id","toISOString","split","headers","Authorization","result","OK","UNAUTHORIZED","push","json","data","console","log","window","showDirectoryPicker","rootDir","total","downloaded","meetings","meeting","recording_files","length","startTime","performance","now","getDirectoryHandle","topic","replaceAll","create","meetingDir","recording","getFileHandle","file_extension","toFixed","recording_start","toLocaleString","recording_end","recordingFileHandle","download_url","response","body","createWritable","pipeTo","className","first_name","last_name","onSubmit","event","onClick","selected","showYearDropdown","showMonthDropdown","closeOnScroll","target","document","onChange","disabled","users","setUsers","tokenErrors","setTokenErrors","otherErrors","setOtherErrors","changeToken","trim","useEffect","timeout","setTimeout","INTERNAL_SERVER_ERROR","clearTimeout","map","userObj","type","styles","selectUser","App","setIsMobile","sessionStorage","getItem","resizeHandler","matchMedia","matches","addEventListener","removeEventListener","setItem","path","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message","module","exports"],"mappings":"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","file":"static/js/main.8cad095d.chunk.js","sourcesContent":["export enum STATUS_CODES {\r\n    INTERNAL_SERVER_ERROR = 500,\r\n    BAD_REQUEST = 400,\r\n    UNAUTHORIZED = 401,\r\n    FORBIDDEN = 403,\r\n    NOT_FOUND = 404,\r\n    CONFLICT = 409,\r\n    CREATED = 201,\r\n    OK = 200\r\n}\r\n\r\nexport interface User {\r\n    first_name: string;\r\n    last_name: string;\r\n    id: string;\r\n}","import { FunctionComponent, MouseEventHandler, useState } from \"react\";\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport { useHistory } from \"react-router\";\r\nimport { STATUS_CODES, User } from \"../../types\";\r\n\r\ninterface IProps {\r\n    isMobile: boolean;\r\n    setToken: (token: string) => void;\r\n    token: string;\r\n    setUser: (user: User | null) => void;\r\n    user: User;\r\n}\r\n\r\nconst Component: FunctionComponent<IProps> = ({ isMobile, token, setToken, setUser, user }) => {\r\n    const history = useHistory();\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const [status, setStatus] = useState<string>(\"\");\r\n\r\n    const [startDate, setStartDate] = useState<Date | null>(new Date(\"2016/1/1\"));\r\n    const [endDate, setEndDate] = useState<Date | null>(new Date());\r\n\r\n    const [startDateErrors, setStartDateErrors] = useState(\"\");\r\n    const [endDateErrors, setEndDateErrors] = useState(\"\");\r\n\r\n    const onStartDateChange = (value: Date | null) => {\r\n        changeStartDate(value);\r\n    };\r\n\r\n    const changeStartDate = (value: Date | null) => {\r\n        // Validators\r\n        if (value == null) {\r\n            setStartDateErrors(\"This field is required\");\r\n        } else {\r\n            setStartDateErrors(\"\");\r\n        }\r\n\r\n        setStartDate(value);\r\n    };\r\n\r\n    const onEndDateChange = (value: Date | null) => {\r\n        changeEndDate(value);\r\n    };\r\n\r\n\r\n    const changeEndDate = (value: Date | null) => {\r\n        // Validators\r\n        if (value == null) {\r\n            setEndDateErrors(\"This field is required\");\r\n        } else {\r\n            setEndDateErrors(\"\");\r\n        }\r\n\r\n        setEndDate(value);\r\n    };\r\n\r\n    // Fix for closing the datepicker on click\r\n    const datePickerLabelClick: MouseEventHandler<HTMLLabelElement> = (e) => e.preventDefault();\r\n\r\n    const download = async () => {\r\n        if (!startDate || !endDate) return;\r\n\r\n        setIsLoading(true);\r\n        let result = await fetch(\r\n            `https://free-cors-bypass.herokuapp.com/https://api.zoom.us/v2/users/${user.id\r\n            }/recordings?from=${startDate.toISOString().split(\"T\")[0]\r\n            }&to=${endDate.toISOString().split(\"T\")[0]\r\n            }&page_size=300`,\r\n            {\r\n                headers: {\r\n                    Authorization: `Bearer ${token}`,\r\n                    \"content-type\": \"application/json\",\r\n                },\r\n            }\r\n        );\r\n\r\n        switch (result.status) {\r\n            case STATUS_CODES.OK:\r\n                break;\r\n\r\n            case STATUS_CODES.UNAUTHORIZED:\r\n                return history.push(\"/user\");\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        let data = await result.json();\r\n        console.log(data);\r\n\r\n        try {\r\n            const rootDir = await window.showDirectoryPicker();\r\n\r\n\r\n            let total = 0;\r\n            let downloaded = 0;\r\n\r\n            for (const meeting of data.meetings) {\r\n                total += meeting.recording_files.length;\r\n            }\r\n\r\n            let startTime = performance.now();\r\n\r\n            setStatus(`Downloaded ${downloaded}/${total}`);\r\n\r\n            for (const meeting of data.meetings) {\r\n                // console.log(meeting);\r\n                // console.log(\"test\");\r\n\r\n                const meetingDir = await rootDir.getDirectoryHandle(`${meeting.topic} (${meeting.id})`.replaceAll(/[\\\\/:*?\"<>|]/g, \"-\"), { create: true });\r\n\r\n                for (const recording of meeting.recording_files) {\r\n                    try {\r\n                        if (await meetingDir.getFileHandle(`${recording.id}.${recording.file_extension}`)) {\r\n                            setStatus(`Downloaded ${++downloaded}/${total} ${downloaded < total ? `(${((performance.now() - startTime) * total / downloaded / 1000).toFixed(2)}s remaining)` : \"\"}`);\r\n                            continue;\r\n                        }\r\n                    } catch (error) { }\r\n\r\n                    const recordingFileHandle = await meetingDir.getFileHandle(`${new Date(recording.recording_start).toLocaleString()\r\n                        } to ${new Date(recording.recording_end).toLocaleString()\r\n                        } (${recording.id}).${recording.file_extension}`.replaceAll(/[\\\\/:*?\"<>|]/g, \"-\"),\r\n                        { create: true });\r\n\r\n                    const response = await fetch(\r\n                        `https://free-cors-bypass.herokuapp.com/${recording.download_url}?access_token=${token}`\r\n                    );\r\n\r\n                    if (response.body) {\r\n                        await response.body.pipeTo(await recordingFileHandle.createWritable());\r\n                    }\r\n\r\n                    setStatus(`Downloaded ${++downloaded}/${total} ${downloaded < total ? `(${((performance.now() - startTime) * total / downloaded / 1000).toFixed(2)}s remaining)` : \"\"}`);\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setIsLoading(false);\r\n        }\r\n        setIsLoading(false);\r\n    };\r\n\r\n    return <div className=\"vbox gap padding\">\r\n        <h1>{`${user.first_name} ${user.last_name}`}</h1>\r\n        <form onSubmit={event => { event.preventDefault(); download(); }}>\r\n            <label onClick={datePickerLabelClick}>\r\n                Start Date\r\n                <DatePicker\r\n                    selected={startDate}\r\n                    showYearDropdown\r\n                    showMonthDropdown\r\n                    closeOnScroll={e => e.target === document}\r\n                    onChange={onStartDateChange}\r\n                    className={startDateErrors !== \"\" ? \"error\" : \"\"}\r\n                />\r\n                <p className=\"error\">{startDateErrors}</p>\r\n            </label>\r\n            <label onClick={datePickerLabelClick}>\r\n                End Date\r\n                <DatePicker\r\n                    selected={endDate}\r\n                    showYearDropdown\r\n                    showMonthDropdown\r\n                    closeOnScroll={e => e.target === document}\r\n                    onChange={onEndDateChange}\r\n                    className={endDateErrors !== \"\" ? \"error\" : \"\"}\r\n                />\r\n                <p className=\"error\">{endDateErrors}</p>\r\n            </label>\r\n            <button disabled={isLoading}>{isLoading ? <div className=\"spinner\" /> : \"Download\"}</button>\r\n            <p>{status}</p>\r\n        </form>\r\n    </div>;\r\n};\r\n\r\nexport default Component;\r\n","import { ChangeEventHandler, FunctionComponent, useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router\";\r\nimport { STATUS_CODES, User } from \"../../types\";\r\nimport styles from \"./index.module.css\";\r\n\r\ninterface IProps {\r\n    isMobile: boolean;\r\n    setToken: (token: string) => void;\r\n    token: string;\r\n    setUser: (user: User) => void;\r\n    user: User | null;\r\n}\r\n\r\nconst Component: FunctionComponent<IProps> = ({ isMobile, token, setToken, setUser, user }) => {\r\n    const history = useHistory();\r\n    const [users, setUsers] = useState<User[]>([]);\r\n\r\n    const [tokenErrors, setTokenErrors] = useState(\"\");\r\n    const [otherErrors, setOtherErrors] = useState(\"\");\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    const onTokenChange: ChangeEventHandler<HTMLInputElement> = (event) => {\r\n        changeToken(event.target.value);\r\n    };\r\n\r\n    const changeToken = (value: string) => {\r\n        // Validators\r\n        if (value.trim().length === 0) {\r\n            setTokenErrors(\"This field is required\");\r\n        } else {\r\n            setTokenErrors(\"\");\r\n        }\r\n\r\n        setToken(value);\r\n    };\r\n\r\n    const selectUser = (user: User) => {\r\n        setUser(user);\r\n        history.push(\"/\");\r\n    };\r\n\r\n    useEffect(() => {\r\n        let timeout = 0;\r\n\r\n        setUsers([]);\r\n        setIsLoading(false);\r\n\r\n        if (token.trim() !== \"\") {\r\n            setIsLoading(true);\r\n            timeout = setTimeout(async () => {\r\n                let result = await fetch(\r\n                    `https://free-cors-bypass.herokuapp.com/https://api.zoom.us/v2/users?page_size=300`,\r\n                    {\r\n                        headers: {\r\n                            Authorization: `Bearer ${token}`,\r\n                            \"content-type\": \"application/json\",\r\n                        },\r\n                    }\r\n                );\r\n\r\n                setIsLoading(false);\r\n\r\n                switch (result.status) {\r\n                    case STATUS_CODES.OK:\r\n                        let data = await result.json();\r\n                        setUsers(data.users);\r\n                        console.log(data);\r\n                        setTokenErrors(\"\");\r\n                        break;\r\n\r\n                    case STATUS_CODES.UNAUTHORIZED:\r\n                        setTokenErrors(\"Invalid jwt\");\r\n                        break;\r\n\r\n                    case STATUS_CODES.INTERNAL_SERVER_ERROR:\r\n                        setOtherErrors(\"Error: Please try again later.\");\r\n                        return setIsLoading(false);\r\n\r\n                    default:\r\n                        break;\r\n                }\r\n            }, 1000) as any;\r\n        } else {\r\n            setIsLoading(false);\r\n        }\r\n\r\n        return () => { clearTimeout(timeout); };\r\n    }, [token]);\r\n\r\n\r\n    return <form className=\"padding\">\r\n        <label>\r\n            JWT\r\n            <input className={tokenErrors !== \"\" ? \"error\" : \"\"} onChange={onTokenChange} value={token} />\r\n            <p className=\"error\">{tokenErrors}</p>\r\n        </label>\r\n        <p>Users</p>\r\n        <div className=\"vbox gap\">\r\n            {isLoading ? <div className=\"spinner\" /> : null}\r\n            {\r\n                users.map(userObj => <button key={userObj.id}\r\n                    type=\"button\"\r\n                    className={userObj.id === user?.id ? styles.selected : \"\"}\r\n                    onClick={() => { selectUser(userObj); }}>{`${userObj.first_name} ${userObj.last_name}`}\r\n                </button>)\r\n            }\r\n        </div>\r\n        <p className=\"error\">{otherErrors}</p>\r\n    </form>;\r\n};\r\n\r\nexport default Component;\r\n","import { FunctionComponent, useEffect, useState } from \"react\";\r\nimport { HashRouter, Redirect, Route, Switch } from \"react-router-dom\";\r\nimport Home from \"./components/home\";\r\nimport UserSelect from \"./components/userSelect\";\r\nimport { User } from \"./types\";\r\n\r\nconst App: FunctionComponent = () => {\r\n  const [token, setToken] = useState<string>(\"\");\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n\r\n  useEffect(() => {\r\n    let token = sessionStorage.getItem(\"token\");\r\n\r\n    if (token) {\r\n      // let user = jwt.decode(token, { json: true });\r\n      // if (token && token.exp && Math.floor(Date.now() / 1000) <= token.exp) {\r\n      //   setUser(user);\r\n      // } else {\r\n      //   setToken(\"\");\r\n      // }\r\n      setToken(token);\r\n    }\r\n\r\n    const resizeHandler = () => {\r\n      setIsMobile(window.matchMedia(\"(max-width: 768px)\").matches);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n    resizeHandler();\r\n\r\n    return () => { window.removeEventListener(\"resize\", resizeHandler); };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    sessionStorage.setItem(\"token\", token);\r\n\r\n    if (!token) {\r\n      setUser(null);\r\n    }\r\n  }, [token]);\r\n\r\n  return <HashRouter>\r\n    <Switch>\r\n      <Route path=\"/user\" >\r\n        <UserSelect isMobile={isMobile} token={token} setToken={setToken} setUser={setUser} user={user} />\r\n      </Route>\r\n      <Route path=\"/\" >\r\n        {!token || !user ? <Redirect to=\"/user\" /> : <Home isMobile={isMobile} token={token} setToken={setToken} setUser={setUser} user={user} />}\r\n      </Route>\r\n    </Switch>\r\n  </HashRouter>;\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from \"web-vitals\";\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === \"[::1]\" ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won\"t work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let\"s check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n            \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It\"s the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can\"t reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\"No internet connection found. App is running in offline mode.\");\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"secondaryColor\":\"userSelect_secondaryColor__1mEp7\",\"tertiaryColor\":\"userSelect_tertiaryColor__15Yib\",\"quaternaryColor\":\"userSelect_quaternaryColor__2NW1J\",\"secondaryFillColor\":\"userSelect_secondaryFillColor__1RSfT\",\"tertiaryFillColor\":\"userSelect_tertiaryFillColor__19YhX\",\"quaternaryFillColor\":\"userSelect_quaternaryFillColor__1-h7N\",\"gray\":\"userSelect_gray__1924d\",\"maxWidth700\":\"userSelect_maxWidth700__3mxPn\",\"maxWidth1100\":\"userSelect_maxWidth1100__1dWzX\",\"maxWidth1400\":\"userSelect_maxWidth1400__3LmKO\",\"selected\":\"userSelect_selected__2Uj_L\"};"],"sourceRoot":""}